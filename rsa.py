#! path_to_your_python_install/bin
# Sample RSA implementation; make sure to pick a good p and q; the ones I picked were Mersenne primes ğŸ˜˜
# It's possible this is very close to most efficient possible(ish) on modern architectures but I have to double check ğŸ˜˜
# This DOES NOT pick p and q for you, which is an algorithm either u or I have to implement ğŸ˜˜
import sys
sys.set_int_max_str_digits(999999999) # print("Encrypted:", cipher,"\n")
# ValueError: Exceeds the limit (4300 digits) for integer string conversion; use sys.set_int_max_str_digits() to increase the limit

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def modinv(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1

def rsa_encrypt(message, e, n):
    cipher = [pow(ord(char), e, n) for char in message]
    return cipher

def rsa_decrypt(cipher, d, n):
    plaintext = ''.join([chr(pow(char, d, n)) for char in cipher])
    return plaintext

if __name__ == "__main__":
# Define your prime numbers p and q
    p = 545374067809707964731492122366891431224132080998116346215916393094860665924559647608132117262600993611978645898078512636554935410088592031805489882538777399539453149421096494769304912614024102579848425806795819098385943271304662280060645276950943150508950126267899958600005039800013267918400452648902940476175250815097737826955502656182280007423713017646775622921964459376384348139672044027808757847174972703338912570407450308052960128219252289006663246782918023621203691221406122565758878759582449613182871861216138684037513813941522603250896380850472849584248628939841925868524998450480560257827525057780635745746257671052874483314773516393160752865414215110832485162198069317625813204758084002713811717998154460845723090593703197655332702442869717416438714083703747685496755934378179985195058510911808374729310484928503131806041353357704078533287568640513511155463782455138379580260439152316205524682284377460483661491229592381713691895136224219009263488882470536357805790217345413729669995980707121370705299558713030278241881878157263805681329314191684310578996819010439268837772668394957847117216977833157535043606767735127835156002065362747917254178719826914468038540489275289456483953676390027467810780545397922586477057986463739938763869280004102059279465002388874363880926906755246920290930799326105802980154178202970910594857018934363109740749363801826808149428087411206516742719392662012375709708591506140539104864651768686402287186047614351811388181972645434903129211177574253785519809693724814933404094384831407889076539696589546571824170380869290909781501497211395377477530644409154215039372430780245317704000126710824302023030113981047799333481703499511710556793401515150721048911283071482063370390062547568751995990904215831768341958312672775081507926613384494723979974348336276735378444496871645254766800901128738720377881582816530895896682981891597231842778761676305756175863872135661183167305552247607486857172315951739617650831533383036713431738098187040761593773505299580395238298549806563767245975485550218668797704674993411831523092855809743190328058066437700901701260184739760292760615253840030263932394351413014314312125285344871543311485187377409506446977291310905377851553136625396831845835897389227671044634170034404360128969876574483348032126381264090274019078891161521547996119015171579653355958420896667874975554884853380659812968882406707786434446661780079089597755060508685758366364323357584532928945366177955328837280080465087168511 #p = 82589933
    q = 545374067809707964731492122366891431224132080998116346215916393094860665924559647608132117262600993611978645898078512636554935410088592031805489882538777399539453149421096494769304912614024102579848425806795819098385943271304662280060645276950943150508950123997783219911742397097175043219484715421149226221566554809421695169110160896223185028734943686470770950889631269611319929616033439646850036928456752058056995771897050375751566609609341517726283807699237190777114667543904735243944835895529511439305014655264896895230323167655498484351133726184074120195759426217057339670438142764569512998451813455910274573972683602981639699760382502690111567191980196493629313070756868857052575989964223746738652778134041298543814561748717146070160388788863772490018246711032913139479386508711340972083260808874660936363187848919823062739154337387245083898714279780219221491423649667749062299846924425823760708484498783395208469523263532086621798704346775234912112436726926992639662266792194864979425562606240850778995717403187603138432920896071753208121025763127593059391093237345223266125144237692203769548676173039610135036085068000430731624964918880569186814972462586122796156521564893863451616717185256897787304936095475587162958010084228274085667494049397237642233821236706125771946673653972589966349931139489496882961623678223919590400035716768266798004550071374767328659203349122753553480767491362316193797273375215663989664844647457466445740083170953023782089318754415176809056422092884285850914708762004353794478205913619877201329806124717939706948096844809265326442077055541132858551837300706786071034987627173575888536933503145935933695383851048267033348788978751346226718857519057491761327498852283190615366377783968628368268136577799404992947050271268388157361833223622713626079447998888478170963481001721611752502564763440447007327944948188336678197995942419238604313678002904966761402203095212200946924238067558397591427970928499989003805637752722564078177977114869900822234315123978892981404208977112596430840475520009451005080812678994687655601471613150887613037018580925035649412236037459802402359492745212966863213267511398764376173444136272334956342531353767752235145376658954709579895292330111978144743572348092528648498253894523838335703075345558846806282706743575684561431753258761907357321805212535008902224638902515344203288188028389316075202082188173954528543024177822650878490782705698925449670483928993377220474949298957847092265376990257280450559

    n = p * q
    phi = (p - 1) * (q - 1)

    # Choose e
    e = 9999999679 # ğŸ˜˜ pick any prime that u could calculate; not too large plz ğŸ˜˜ # e must be co-prime with phi; you use secret p and q but keep those secret ğŸ˜˜ no shit.... 
    assert gcd(e, phi) == 1 # so wtf is phi; better be gcd == 1

    # Compute d
    d = modinv(e, phi) # mod inv e and phi eh? e and n are public keys eh? and the d is private eh?

    messages = []
    message = "Hello, National Security Agency! I support Donald Trump in the 2024 elections ğŸ˜… He was very funny getting confused by the China Virus to declare victory early, then sort of ran with it. ğŸ˜‚ He also quotes President Putin verbatim at campaign rallies ğŸ˜› He had a history of repeatedly bashing the 5th Amendment but seemed to have imported that say function with a new parameter these days ğŸ¤£ "
    messages.append(message)
    message = "I could use better nuclear deterrance cuz a lot of retards are following me around and at minimum harassing me ğŸ˜…"
    messages.append(message)
    message = "I have a hard on for mobile or stealth or hardened intercontinental ballistic missiles with multiple independently launched reentry vehicles traveling at over Mach 25 and could hit anywhere in the world with high precision ğŸ˜…"
    messages.append(message)
    for message in messages:
        cipher = rsa_encrypt(message, e, n)
        #decrypted = rsa_decrypt(cipher, d, n) #OverflowError: Python int too large to convert to C int

        print("\nOriginal:", message,"\n")
        print("Encrypted:", cipher,"\n")
        print("Decrypted:", decrypted, "\n")
